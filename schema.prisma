// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Author {
//   author_id   Int      @id @default(autoincrement())
//   author_name String
//   email       String
//   created_at  DateTime

//   // Define the relation to the Posts model
//   posts       Post[]
//   // Define the relation to the Comments model
//   comments    Comment[]
// }

// // Define the Posts model
// model Post {
//   post_id     Int      @id @default(autoincrement())
//   title       String
//   content     String
//   created_at  DateTime

//   // Define the relation to the Author model
//   author      Author   @relation(fields: [author_id], references: [author_id])
//   author_id   Int

//   // Define the relation to the Comments model
//   comments    Comment[]
// }

// // Define the Comments model
// model Comment {
//   comment_id  Int      @id @default(autoincrement())
//   content     String
//   created_at  DateTime

//   // Define the relation to the Author model
//   author      Author   @relation(fields: [author_id], references: [author_id])
//   author_id   Int

//   // Define the relation to the Post model
//   post        Post     @relation(fields: [post_id], references: [post_id])
//   post_id     Int
// }

// schema.prisma


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
// Define the Author model
model Author {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  authorName String
  email       String   @unique
  createdAt  DateTime @default(now())
  posts       Post[]
  comments    Comment[]
}

// Define the Post model
model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  createdAt DateTime @default(now())
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  comments   Comment[]
}

// Define the Comment model
model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  created_at DateTime @default(now())
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @db.ObjectId
}


